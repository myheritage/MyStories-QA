name: Sanity Tests

on:
  schedule:
    # Run at 8:00 AM, 1:00 PM, and 6:00 PM Israel time (UTC+2)
    - cron: '0 6,11,16 * * *'
  # Allow manual trigger
  workflow_dispatch:

jobs:
  test:
    name: Run Sanity Tests
    timeout-minutes: 60
    runs-on: ubuntu-latest

    env:
      MAILSLURP_API_KEY: ${{ secrets.MAILSLURP_API_KEY }}
      STRIPE_SANDBOX: true
      EMAIL_MODE: ${{ secrets.MAILSLURP_API_KEY != '' && 'mailslurp' || 'fake' }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run Sanity tests
        id: run-tests
        run: |
          start_time=$(date +%s)
          
          # Log email mode for debugging
          echo "EMAIL_MODE is set to: $EMAIL_MODE"
          echo "MAILSLURP_API_KEY is ${MAILSLURP_API_KEY:+set}${MAILSLURP_API_KEY:-not set}"
          
          # Run tests and capture output
          if [ "$EMAIL_MODE" = "mailslurp" ] && [ -n "$MAILSLURP_API_KEY" ]; then
            echo "Running all tests including email tests (MailSlurp configured)"
            if OUTPUT=$(npx playwright test --grep "@Sanity" --grep-invert "@real-card" --project=Chrome 2>&1); then
              status="success"
            else
              status="failure"
              # Show test output on failure for debugging
              echo "Test output:"
              echo "$OUTPUT"
            fi
          else
            echo "Running tests without email tests (MailSlurp not configured or disabled)"
            if OUTPUT=$(npx playwright test --grep "@Sanity" --grep-invert "@Emails|@real-card" --project=Chrome 2>&1); then
              status="success"
            else
              status="failure"
              # Show test output on failure for debugging
              echo "Test output:"
              echo "$OUTPUT"
            fi
          fi
          
          # Calculate duration
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          
          # Extract test summary
          passed=$(echo "$OUTPUT" | grep -o '[0-9]* passed' | awk '{print $1}')
          failed=$(echo "$OUTPUT" | grep -o '[0-9]* failed' | awk '{print $1}')
          skipped=$(echo "$OUTPUT" | grep -o '[0-9]* skipped' | awk '{print $1}')
          
          # Extract failed test names if any failures
          if [ "${failed:-0}" -gt 0 ]; then
            echo "Failed tests:" >> $GITHUB_STEP_SUMMARY
            echo "$OUTPUT" | grep -B 1 "FAIL" | grep "✘" | sed 's/.*✘ /• /' >> $GITHUB_STEP_SUMMARY
            failed_tests=$(echo "$OUTPUT" | grep -B 1 "FAIL" | grep "✘" | sed 's/.*✘ /• /')
          else
            failed_tests=""
          fi
          
          # Set outputs
          echo "duration=$duration" >> $GITHUB_OUTPUT
          echo "status=$status" >> $GITHUB_OUTPUT
          echo "passed=${passed:-0}" >> $GITHUB_OUTPUT
          echo "failed=${failed:-0}" >> $GITHUB_OUTPUT
          echo "skipped=${skipped:-0}" >> $GITHUB_OUTPUT
          echo "failed_tests<<EOF" >> $GITHUB_OUTPUT
          echo "$failed_tests" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          test "$status" = "success"
        
      - name: Upload test results
        id: upload-results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Send Slack notification
        if: always()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": "*Sanity Tests ${{ job.status == 'success' && '✅ PASSED' || '❌ FAILED' }}*\n\n*Run Details:*\n• Tests: ${{ steps.run-tests.outputs.passed }} passed, ${{ steps.run-tests.outputs.failed }} failed, ${{ steps.run-tests.outputs.skipped }} skipped\n• Duration: ${{ steps.run-tests.outputs.duration }}s\n• Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\n• Report: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${{ steps.upload-results.outputs.artifact-id }}${{ steps.run-tests.outputs.failed != '0' && '\n\n*Failed Tests:*\n' || '' }}${{ steps.run-tests.outputs.failed_tests }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
